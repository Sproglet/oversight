#!/bin/sh

# $Id:$
#
# Call libjpeb commands to resize a backdrop

OVS_HOME=/share/Apps/oversight

export LD_LIBRARY_PATH="$OVS_HOME/bin:$LD_LIBRARY_PATH"

export PATH="$OVS_HOME/bin:$PATH"


jpg_resize() {

    # resize a jpeg to Sd or Hd backdrop

    input="$1"
    type="$2"
    tv_mode="$3"
    input_width="$4"

    case "$type" in 
        fanart)
            case "$tv_mode" in 
                hd) new_width=${input_width:-1280} ;; #add 1300
                sd) new_width=${input_width:-900} ;; # 800 also 624 or 720!
                *) echo "unknown tv_mode $tv_mode usage $0 file.jpg poster|fanart hd|sd [width]" ; exit 1 ;;
            esac
            suffix=".$tv_mode.jpg"
            ;;
        poster)
            new_width=300
            suffix=".jpg"
            ;;
        *)
            echo "unknown type $type usage $0 file.jpg poster|fanart hd|sd [width]"
            exit 1
            ;;
        esac

    #get real width
    old_width=`rdjpgcom -verbose "$input" | awk '/^JPEG image is/ { w=$4 ; sub(/w/,"",w) ; print w ; }'`

    output=`echo "$input" | sed "s/\.jpg$/$suffix/"`

    #scale it
    echo djpeg -scale $new_width/$old_width "$input to $output"
    if [ $new_width == $old_width ] ; then
        ln "$input" "$output"
    else
        #Could use a pipe but input may = output so use tmp file.
        djpeg -scale $new_width/$old_width "$input" > /tmp/$$ && cjpeg /tmp/$$ > "$output" && rm /tmp/$$
    fi
}

if [ -z "$3" ] ; then
	echo "usage $0 [poster|fanart] url file wget options"
	exit 1
fi

fetch_resize() {
    DEBUG "fetch and resize $@"
    type="$1" ; shift; # poster or fanart
    url="$1" ; shift;
    file="$1" ; shift ;

    if wget -O "$file" "$@" "$url"  ; then
        case "$type" in
            fanart)
                jpg_resize "$file" $type hd
                jpg_resize "$file" $type sd
                ;;
            poster)
                jpg_resize "$file" $type sd
                ;;
        esac
    fi
}

Q=/share/Apps/oversight/tmp/resize.queue
# Due to memory limits we pricess one request at a time.
if [ -f $Q.pending ]  || [ -f $Q.processing ] ; then
    echo  "$@" >> $Q.pending
else
    echo  "$@" >> $Q.pending

    while [ -f "$Q.pending" ] ; do

        cat "$Q.pending" >> "$Q.processing"

        while FS= read line ; do

            fetch_resize $line

        done < "$Q.processing"

        rm "$Q.processing"

    done
fi

